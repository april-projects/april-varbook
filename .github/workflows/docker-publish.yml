name: Docker Build Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ] # 支持版本标签触发构建

env:
  IMAGE_NAME: mobaijun/varbook

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Install pnpm
        run: npm install -g pnpm@8.15.5
      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('april-varbook-frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Build Frontend
        run: |
          cd april-varbook-frontend
          pnpm install --frozen-lockfile
          pnpm run build
          cd ..

      - name: Maven Build
        run: mvn -B clean package -DskipTests

      - name: Set image tags
        id: vars
        run: |
          VERSION_TAG=latest
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
          fi
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Docker Setup
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.version_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max